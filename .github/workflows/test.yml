name: "Test"

on:
  push:
    branches:
      - 'master'
    paths-ignore:
      - '**/*.md'
  workflow_dispatch:

jobs:
  'test':
    runs-on: ${{ matrix['os'] }}
    strategy:
      matrix:
        'os': ['ubuntu-latest', 'windows-latest', 'macos-latest']
        'json':
          - |
            {
              "appSlug": "github-actions",
              "local": false,
              "expectFail": false,
              "expectedOutputs": {
                "app-slug": "github-actions",
                "bot-user-id": "41898282",
                "bot-user-login": "github-actions[bot]",
                "git-user-name": "github-actions[bot]",
                "git-user-email": "41898282+github-actions[bot]@users.noreply.github.com"
              }
            }
          - |
            {
              "appSlug": "github-actions",
              "local": true,
              "expectFail": false,
              "expectedOutputs": {
                "app-slug": "github-actions",
                "bot-user-id": "41898282",
                "bot-user-login": "github-actions[bot]",
                "git-user-name": "github-actions[bot]",
                "git-user-email": "41898282+github-actions[bot]@users.noreply.github.com"
              }
            }
          - |
            {
              "appSlug": "foo-bar",
              "local": false,
              "expectFail": true
            }
          - |
            {
              "appSlug": "",
              "local": false,
              "expectFail": true
            }
          - |
            {
              "appSlug": "invalid-slug-with-special-characters-!@#",
              "local": false,
              "expectFail": true
            }
          - |
            {
              "appSlug": "github-actions",
              "local": "invalid-boolean",
              "expectFail": true
            }

    steps:
      - name: "Checkout"
        uses: 'actions/checkout@main'

      - name: "Run Action with Inputs"
        id: 'test'
        continue-on-error: ${{ fromJSON(matrix['json'])['expectFail'] }}
        uses: ./
        with:
          app-slug: ${{ fromJSON(matrix['json'])['appSlug'] }}
          local: ${{ fromJSON(matrix['json'])['local'] }}

      - name: "Check Outputs"
        if: ${{ steps['test'].outcome == 'success' }}
        env:
          'OUTPUTS_JSON': ${{ toJSON(steps['test'].outputs) }}
          'EXPECTED_OUTPUTS_JSON': ${{ toJSON(fromJSON(matrix['json'])['expectedOutputs']) }}
        uses: 'actions/github-script@main'
        with:
          script: |
            const outputsJson = process.env['OUTPUTS_JSON']
            if ( ! outputsJson ) {
              throw new Error('OUTPUTS_JSON environment variable is empty')
            }

            const expectedOutputsJson = process.env['EXPECTED_OUTPUTS_JSON']
            if ( ! expectedOutputsJson ) {
              throw new Error('EXPECTED_OUTPUTS_JSON environment variable is empty')
            }

            let expectedOutputs
            try {
              expectedOutputs = JSON.parse(expectedOutputsJson)
            } catch (e) {
              throw new Error('EXPECTED_OUTPUTS_JSON is not a valid JSON')
            }

            if ( ! expectedOutputs || typeof expectedOutputs !== 'object' || Array.isArray(expectedOutputs) || Object.keys(expectedOutputs).length === 0 ) {
              throw new Error('EXPECTED_OUTPUTS_JSON is empty or not an object')
            }

            let outputs
            try {
              outputs = JSON.parse(outputsJson)
            } catch (e) {
              throw new Error('OUTPUTS_JSON is not a valid JSON')
            }

            if ( ! outputs || typeof outputs !== 'object' || Array.isArray(outputs) || Object.keys(outputs).length === 0 ) {
              throw new Error('OUTPUTS_JSON is empty or not an object')
            }

            await exec.exec('jq', ['-C', '.'], { input: outputsJson })

            for ( const key in expectedOutputs ) {
              if ( expectedOutputs[key] !== outputs[key] ) {
                throw new Error(`Mismatch for key "${key}": expected "${expectedOutputs[key]}", got "${outputs[key]}"`)
              }
            }

      - name: "Check Failure Reason"
        if: ${{ steps['test'].outcome == 'failure' }}
        run: |
          echo "Test failed as expected. Checking failure reason..."
          echo "Failure reason: ${{ steps['test'].outputs['failure-reason'] }}"
